[{"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/index.tsx":"1","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/pages/game.tsx":"2","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/providers/gameProvider.tsx":"3","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/moves.tsx":"4","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/board.tsx":"5","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/square.tsx":"6","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/HelloWorld.tsx":"7","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/stories/helloWorld.stories.tsx":"8","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/helloWorld.tsx":"9"},{"size":396,"mtime":1611886711416,"results":"10","hashOfConfig":"11"},{"size":546,"mtime":1611635842832,"results":"12","hashOfConfig":"11"},{"size":4216,"mtime":1611896634999,"results":"13","hashOfConfig":"11"},{"size":612,"mtime":1611635842832,"results":"14","hashOfConfig":"11"},{"size":578,"mtime":1611635842832,"results":"15","hashOfConfig":"11"},{"size":864,"mtime":1611635842832,"results":"16","hashOfConfig":"11"},{"size":494,"mtime":1611809471481,"results":"17","hashOfConfig":"11"},{"size":1585,"mtime":1611896888830,"results":"18","hashOfConfig":"11"},{"size":465,"mtime":1611896144955,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"glfjrc",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/index.tsx",[],[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/pages/game.tsx",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/providers/gameProvider.tsx",["44"],"import React, { useReducer, createContext } from \"react\";\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// todo -> typeへ\ninterface Props {\n  children?: React.ReactNode;\n}\n\nexport type contextType = {\n  state: stateType;\n  dispatch: React.Dispatch<Action>;\n};\n\ntype playerType = \"○\" | \"☓\" | null;\n\nexport type stateType = {\n  squares: [\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType\n  ];\n  player: playerType;\n  status: string;\n  history: any[]; // todo anyの撲滅\n  canContinue: boolean;\n};\n\ntype SET_SQUARE = {\n  type: \"SET_SQUARE\";\n  mark: playerType;\n  squareNumber: number;\n};\n\nexport type Action =\n  | SET_SQUARE\n  | { type: \"TOGGLE_NEXT_PLAYER\" }\n  | { type: \"UPDATE_STATUS\" }\n  | { type: \"UPDATE_HISTORY\" }\n  | { type: \"JUMP_TO\"; step: number }\n  | { type: \"CAN_CONTINUE\"; squareNumber: number };\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// todo 引数は必要なもののみ\nconst reducer = (state: stateType, action: Action): stateType => {\n  switch (action.type) {\n    case \"SET_SQUARE\":\n      return {\n        ...state,\n        squares: setSquare(state, action),\n      };\n    case \"TOGGLE_NEXT_PLAYER\":\n      return {\n        ...state,\n        player: toggleNextPlayer(state.player),\n      };\n    case \"UPDATE_STATUS\":\n      return {\n        ...state,\n        status: updateStatus(state.player, state),\n      };\n    case \"UPDATE_HISTORY\":\n      return {\n        ...state,\n        history: updateHistory(state),\n      };\n    case \"JUMP_TO\":\n      if (action.step === 0) {\n        return initialState;\n      }\n      // eslint-disable-next-line no-case-declarations\n      const h = [...state.history];\n      return {\n        ...state,\n        player: action.step % 2 === 0 ? \"☓\" : \"○\",\n        squares: state.history[action.step - 1].squares,\n        history: h.splice(0, action.step),\n      };\n    default:\n      return state;\n  }\n};\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst setSquare = (\n  state: stateType,\n  action: SET_SQUARE\n): stateType[\"squares\"] => {\n  const _ = state.squares.slice();\n  _[action.squareNumber] = action.mark;\n  return _ as stateType[\"squares\"];\n};\n\nconst toggleNextPlayer = (nowPlayer: playerType): playerType => {\n  return nowPlayer === \"☓\" ? \"○\" : \"☓\";\n};\n\nconst updateStatus = (\n  nextPlayer: playerType,\n  state: stateType\n): stateType[\"status\"] => {\n  const winner = calculateWinner(state.squares);\n  // ゲーム終了(決着がついた)\n  if (winner) {\n    return `Winner : ${winner}`;\n  }\n  // todo ゲーム終了(決着がつかなかった)\n  // ゲーム中\n  return `Next Player : ${nextPlayer}`;\n};\n\nconst calculateWinner = (squares: stateType[\"squares\"]): playerType => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a] as playerType;\n    }\n  }\n  return null;\n};\n\nconst updateHistory = (state: stateType): stateType[\"history\"] => {\n  return state.history.concat([{ squares: state.squares }]);\n};\n\n// todo なぜかreducerにいれると処理順番がおかしくなって期待通りの挙動をしない\nexport const canContinue = (\n  squareNumber: number,\n  squares: stateType[\"squares\"]\n): boolean => {\n  return !(squares[squareNumber] || calculateWinner(squares));\n};\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst initialState: stateType = {\n  squares: [null, null, null, null, null, null, null, null, null],\n  player: \"☓\",\n  status: \"Next player: ☓\",\n  history: [],\n  canContinue: true,\n};\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport const GameContext = createContext({} as contextType);\nexport const GameProvider: React.FC<Props> = (props: Props) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      {props.children}\n    </GameContext.Provider>\n  );\n};\n",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/moves.tsx",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/board.tsx",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/square.tsx",[],[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/HelloWorld.tsx",[],[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/stories/helloWorld.stories.tsx",["45","46","47","48","49"],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/helloWorld.tsx",["50","51"],"import React, {useContext} from \"react\";\nimport {GameContext} from \"../providers/gameProvider\";\n\n\nexport type HelloWorldProps = {\n    text: string;\n}\n\nexport const HelloWorld: React.FC<HelloWorldProps> = (props:HelloWorldProps) => {\n    const { state } = useContext(GameContext);\n    return (\n        <div className=\"helloWorld\">\n            {state.player}\n        </div>\n    );\n};\n",{"ruleId":"52","severity":1,"message":"53","line":30,"column":12,"nodeType":"54","messageId":"55","endLine":30,"endColumn":15,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":27},{"ruleId":"57","severity":1,"message":"61","line":4,"column":3,"nodeType":"59","messageId":"60","endLine":4,"endColumn":18},{"ruleId":"57","severity":1,"message":"62","line":11,"column":35,"nodeType":"59","messageId":"60","endLine":11,"endColumn":48},{"ruleId":"63","severity":1,"message":"64","line":38,"column":5,"nodeType":"65","messageId":"66","endLine":38,"endColumn":15},{"ruleId":"63","severity":1,"message":"67","line":38,"column":6,"nodeType":"59","messageId":"68","endLine":38,"endColumn":11},{"ruleId":"57","severity":1,"message":"69","line":9,"column":55,"nodeType":"59","messageId":"60","endLine":9,"endColumn":76},{"ruleId":"57","severity":1,"message":"70","line":10,"column":20,"nodeType":"59","messageId":"60","endLine":10,"endColumn":28},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["71","72"],"@typescript-eslint/no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'HelloWorldProps' is defined but never used.","'action' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'Story' should be typed.","missingArgType","'props' is defined but never used.","'dispatch' is assigned a value but never used.",{"messageId":"73","fix":"74","desc":"75"},{"messageId":"76","fix":"77","desc":"78"},"suggestUnknown",{"range":"79","text":"80"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"79","text":"81"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[539,542],"unknown","never"]