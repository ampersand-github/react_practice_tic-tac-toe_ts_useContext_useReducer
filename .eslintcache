[{"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/index.tsx":"1","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/pages/game.tsx":"2","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/providers/gameProvider.tsx":"3","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/moves.tsx":"4","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/board.tsx":"5","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/square.tsx":"6","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/HelloWorld.tsx":"7","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/stories/helloWorld.stories.tsx":"8","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/helloWorld.tsx":"9","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/stories/board.stories.tsx":"10","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/stories/square.stories.tsx":"11"},{"size":396,"mtime":1611886711416,"results":"12","hashOfConfig":"13"},{"size":546,"mtime":1611635842832,"results":"14","hashOfConfig":"13"},{"size":4223,"mtime":1611921609912,"results":"15","hashOfConfig":"13"},{"size":612,"mtime":1611635842832,"results":"16","hashOfConfig":"13"},{"size":718,"mtime":1611918859567,"results":"17","hashOfConfig":"13"},{"size":927,"mtime":1611920619753,"results":"18","hashOfConfig":"13"},{"size":494,"mtime":1611809471481,"results":"19","hashOfConfig":"13"},{"size":1625,"mtime":1611923557225,"results":"20","hashOfConfig":"13"},{"size":466,"mtime":1611918325575,"results":"21","hashOfConfig":"13"},{"size":746,"mtime":1611924171542,"results":"22","hashOfConfig":"13"},{"size":766,"mtime":1611924171546,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"glfjrc",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/index.tsx",[],[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/pages/game.tsx",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/providers/gameProvider.tsx",["51"],"import React, { useReducer, createContext } from \"react\";\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// todo -> typeへ\ninterface Props {\n  children?: React.ReactNode;\n}\n\nexport type contextType = {\n  state: stateType;\n  dispatch: React.Dispatch<Action>;\n};\n\ntype playerType = \"○\" | \"☓\" | null;\n\nexport type stateType = {\n  squares: [\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType\n  ];\n  player: playerType;\n  status: string;\n  history: any[]; // todo anyの撲滅\n  canContinue: boolean;\n};\n\ntype SET_SQUARE = {\n  type: \"SET_SQUARE\";\n  mark: playerType;\n  squareNumber: number;\n};\n\nexport type Action =\n  | SET_SQUARE\n  | { type: \"TOGGLE_NEXT_PLAYER\" }\n  | { type: \"UPDATE_STATUS\" }\n  | { type: \"UPDATE_HISTORY\" }\n  | { type: \"JUMP_TO\"; step: number }\n  | { type: \"CAN_CONTINUE\"; squareNumber: number };\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// todo 引数は必要なもののみ\nexport const reducer = (state: stateType, action: Action): stateType => {\n  switch (action.type) {\n    case \"SET_SQUARE\":\n      return {\n        ...state,\n        squares: setSquare(state, action),\n      };\n    case \"TOGGLE_NEXT_PLAYER\":\n      return {\n        ...state,\n        player: toggleNextPlayer(state.player),\n      };\n    case \"UPDATE_STATUS\":\n      return {\n        ...state,\n        status: updateStatus(state.player, state),\n      };\n    case \"UPDATE_HISTORY\":\n      return {\n        ...state,\n        history: updateHistory(state),\n      };\n    case \"JUMP_TO\":\n      if (action.step === 0) {\n        return initialState;\n      }\n      // eslint-disable-next-line no-case-declarations\n      const h = [...state.history];\n      return {\n        ...state,\n        player: action.step % 2 === 0 ? \"☓\" : \"○\",\n        squares: state.history[action.step - 1].squares,\n        history: h.splice(0, action.step),\n      };\n    default:\n      return state;\n  }\n};\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst setSquare = (\n  state: stateType,\n  action: SET_SQUARE\n): stateType[\"squares\"] => {\n  const _ = state.squares.slice();\n  _[action.squareNumber] = action.mark;\n  return _ as stateType[\"squares\"];\n};\n\nconst toggleNextPlayer = (nowPlayer: playerType): playerType => {\n  return nowPlayer === \"☓\" ? \"○\" : \"☓\";\n};\n\nconst updateStatus = (\n  nextPlayer: playerType,\n  state: stateType\n): stateType[\"status\"] => {\n  const winner = calculateWinner(state.squares);\n  // ゲーム終了(決着がついた)\n  if (winner) {\n    return `Winner : ${winner}`;\n  }\n  // todo ゲーム終了(決着がつかなかった)\n  // ゲーム中\n  return `Next Player : ${nextPlayer}`;\n};\n\nconst calculateWinner = (squares: stateType[\"squares\"]): playerType => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a] as playerType;\n    }\n  }\n  return null;\n};\n\nconst updateHistory = (state: stateType): stateType[\"history\"] => {\n  return state.history.concat([{ squares: state.squares }]);\n};\n\n// todo なぜかreducerにいれると処理順番がおかしくなって期待通りの挙動をしない\nexport const canContinue = (\n  squareNumber: number,\n  squares: stateType[\"squares\"]\n): boolean => {\n  return !(squares[squareNumber] || calculateWinner(squares));\n};\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport const initialState: stateType = {\n  squares: [null, null, null, null, null, null, null, null, null],\n  player: \"☓\",\n  status: \"Next player: ☓\",\n  history: [],\n  canContinue: true,\n};\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport const GameContext = createContext({} as contextType);\nexport const GameProvider: React.FC<Props> = (props: Props) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      {props.children}\n    </GameContext.Provider>\n  );\n};\n",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/moves.tsx",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/board.tsx",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/square.tsx",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/HelloWorld.tsx",[],[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/stories/helloWorld.stories.tsx",["52","53","54","55"],"import React, { useContext, useReducer } from \"react\";\nimport {\n  HelloWorld,\n  HelloWorldProps,\n  HelloWorldWittUseContext,\n} from \"../parts/helloWorld\";\nimport { addDecorator, Story } from \"@storybook/react\";\nimport {Action, GameContext, initialState, stateType} from \"../providers/gameProvider\";\n\n// - - - - - - - - reducerのmock - - - - - - - -\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst reducer = (state: stateType,action:Action)=>  {\nreturn state\n\n};\nconst mockInitialState: stateType = {\n  ... initialState,\n  player: \"○\",\n};\n\n// - - - - - - - - storyBook - - - - - - - -\ninterface StoryMetadata {\n  comments: React.ReactNode;\n  title: string;\n  decorators?: Parameters<typeof addDecorator>[0][];\n}\n\n// https://github.com/storybookjs/storybook/issues/7677\nconst metadata: StoryMetadata = {\n  title: \"HelloWorld\",\n  comments: HelloWorld,\n  /*\n  args: { text: \"initialValue\" }, // 初期値\n  argTypes:{\n    text: { control: { type: 'text' } }, // guiで入力ができるようになる\n  },\n */\n  decorators: [\n    (Story) => {\n      const [state, dispatch] = useReducer(reducer, mockInitialState);\n      return (\n        <GameContext.Provider value={{ state, dispatch }}>\n          {Story()}\n        </GameContext.Provider>\n      );\n    },\n  ],\n};\nexport default metadata;\n\n// - - - - - - - - UI - - - - - - - -\n/*\nconst Template: Story<HelloWorldProps> = (args) => {\n  return <HelloWorld {...args} />;\n};\nexport const Default = Template.bind({});\nexport const Primary = Template.bind({});\nPrimary.args = { text: \"Primary\" };\n */\n\nexport const Default: Story = () => {\n  return <HelloWorldWittUseContext />;\n};\n","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/helloWorld.tsx",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/stories/board.stories.tsx",["56"],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/stories/square.stories.tsx",[],{"ruleId":"57","severity":1,"message":"58","line":30,"column":12,"nodeType":"59","messageId":"60","endLine":30,"endColumn":15,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":27},{"ruleId":"62","severity":1,"message":"66","line":4,"column":3,"nodeType":"64","messageId":"65","endLine":4,"endColumn":18},{"ruleId":"67","severity":1,"message":"68","line":39,"column":5,"nodeType":"69","messageId":"70","endLine":39,"endColumn":15},{"ruleId":"67","severity":1,"message":"71","line":39,"column":6,"nodeType":"64","messageId":"72","endLine":39,"endColumn":11},{"ruleId":"62","severity":1,"message":"73","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":22},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["74","75"],"@typescript-eslint/no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'HelloWorldProps' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'Story' should be typed.","missingArgType","'addDecorator' is defined but never used.",{"messageId":"76","fix":"77","desc":"78"},{"messageId":"79","fix":"80","desc":"81"},"suggestUnknown",{"range":"82","text":"83"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"82","text":"84"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[553,556],"unknown","never"]