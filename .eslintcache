[{"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/index.tsx":"1","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/pages/game.tsx":"2","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/providers/gameProvider.tsx":"3","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/moves.tsx":"4","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/board.tsx":"5","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/square.tsx":"6","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/HelloWorld.tsx":"7","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/stories/helloWorld.stories.tsx":"8","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/helloWorld.tsx":"9"},{"size":375,"mtime":1611806609224,"results":"10","hashOfConfig":"11"},{"size":546,"mtime":1611635842832,"results":"12","hashOfConfig":"11"},{"size":4188,"mtime":1611635842832,"results":"13","hashOfConfig":"11"},{"size":612,"mtime":1611635842832,"results":"14","hashOfConfig":"11"},{"size":578,"mtime":1611635842832,"results":"15","hashOfConfig":"11"},{"size":864,"mtime":1611635842832,"results":"16","hashOfConfig":"11"},{"size":219,"mtime":1611808812462,"results":"17","hashOfConfig":"11"},{"size":576,"mtime":1611808820664,"results":"18","hashOfConfig":"11"},{"size":219,"mtime":1611808812462,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"glfjrc",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/index.tsx",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/pages/game.tsx",[],[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/providers/gameProvider.tsx",["41"],"import React, { useReducer, createContext } from \"react\";\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// todo -> typeへ\ninterface Props {\n  children?: React.ReactNode;\n}\n\ntype contextType = {\n  state: stateType;\n  dispatch: React.Dispatch<Action>;\n};\n\ntype playerType = \"○\" | \"☓\" | null;\n\ntype stateType = {\n  squares: [\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType,\n    playerType\n  ];\n  player: playerType;\n  status: string;\n  history: any[]; // todo anyの撲滅\n  canContinue: boolean;\n};\n\ntype SET_SQUARE = {\n  type: \"SET_SQUARE\";\n  mark: playerType;\n  squareNumber: number;\n};\n\ntype Action =\n  | SET_SQUARE\n  | { type: \"TOGGLE_NEXT_PLAYER\" }\n  | { type: \"UPDATE_STATUS\" }\n  | { type: \"UPDATE_HISTORY\" }\n  | { type: \"JUMP_TO\"; step: number }\n  | { type: \"CAN_CONTINUE\"; squareNumber: number };\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// todo 引数は必要なもののみ\nconst reducer = (state: stateType, action: Action): stateType => {\n  switch (action.type) {\n    case \"SET_SQUARE\":\n      return {\n        ...state,\n        squares: setSquare(state, action),\n      };\n    case \"TOGGLE_NEXT_PLAYER\":\n      return {\n        ...state,\n        player: toggleNextPlayer(state.player),\n      };\n    case \"UPDATE_STATUS\":\n      return {\n        ...state,\n        status: updateStatus(state.player, state),\n      };\n    case \"UPDATE_HISTORY\":\n      return {\n        ...state,\n        history: updateHistory(state),\n      };\n    case \"JUMP_TO\":\n      if (action.step === 0) {\n        return initialState;\n      }\n      // eslint-disable-next-line no-case-declarations\n      const h = [...state.history];\n      return {\n        ...state,\n        player: action.step % 2 === 0 ? \"☓\" : \"○\",\n        squares: state.history[action.step - 1].squares,\n        history: h.splice(0, action.step),\n      };\n    default:\n      return state;\n  }\n};\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst setSquare = (\n  state: stateType,\n  action: SET_SQUARE\n): stateType[\"squares\"] => {\n  const _ = state.squares.slice();\n  _[action.squareNumber] = action.mark;\n  return _ as stateType[\"squares\"];\n};\n\nconst toggleNextPlayer = (nowPlayer: playerType): playerType => {\n  return nowPlayer === \"☓\" ? \"○\" : \"☓\";\n};\n\nconst updateStatus = (\n  nextPlayer: playerType,\n  state: stateType\n): stateType[\"status\"] => {\n  const winner = calculateWinner(state.squares);\n  // ゲーム終了(決着がついた)\n  if (winner) {\n    return `Winner : ${winner}`;\n  }\n  // todo ゲーム終了(決着がつかなかった)\n  // ゲーム中\n  return `Next Player : ${nextPlayer}`;\n};\n\nconst calculateWinner = (squares: stateType[\"squares\"]): playerType => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a] as playerType;\n    }\n  }\n  return null;\n};\n\nconst updateHistory = (state: stateType): stateType[\"history\"] => {\n  return state.history.concat([{ squares: state.squares }]);\n};\n\n// todo なぜかreducerにいれると処理順番がおかしくなって期待通りの挙動をしない\nexport const canContinue = (\n  squareNumber: number,\n  squares: stateType[\"squares\"]\n): boolean => {\n  return !(squares[squareNumber] || calculateWinner(squares));\n};\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst initialState: stateType = {\n  squares: [null, null, null, null, null, null, null, null, null],\n  player: \"☓\",\n  status: \"Next player: ☓\",\n  history: [],\n  canContinue: true,\n};\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport const GameContext = createContext({} as contextType);\nexport const GameProvider: React.FC<Props> = (props: Props) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      {props.children}\n    </GameContext.Provider>\n  );\n};\n","/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/moves.tsx",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/board.tsx",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/square.tsx",[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/HelloWorld.tsx",[],[],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/stories/helloWorld.stories.tsx",["42","43"],"/Users/dev/my/app/Practice/react_practice_tic-tac-toe_ts_useContext_useReducer/src/parts/helloWorld.tsx",[],{"ruleId":"44","severity":1,"message":"45","line":30,"column":12,"nodeType":"46","messageId":"47","endLine":30,"endColumn":15,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":11,"column":6,"nodeType":"51","messageId":"52","endLine":11,"endColumn":11},{"ruleId":"53","severity":1,"message":"54","line":14,"column":26,"nodeType":"55","messageId":"56","endLine":14,"endColumn":31},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["57","58"],"@typescript-eslint/no-unused-vars","'Props' is defined but never used.","Identifier","unusedVar","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType",{"messageId":"59","fix":"60","desc":"61"},{"messageId":"62","fix":"63","desc":"64"},"suggestUnknown",{"range":"65","text":"66"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"65","text":"67"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[539,542],"unknown","never"]